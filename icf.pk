// WARN: incomplete; errors

type ICF_channel =
struct
{
    //0
    uint<8> freq0; // l-h
    uint<8> freq1;
    uint<6> flags;
    uint<2> freq2;

    computed uint<24> freq;

    //3
    uint<1> af_filter;
    uint<1> attenuator;
    uint<2> mode;
    uint<4> tuning_step;

    //4
    uint<2> unknown1;
    uint<2> duplex;
    uint<1> unknown3;
    uint<3> tmode;

    //5
    big uint<16> offset; // l-h	

    //7
    uint<2> unknown2;
    uint<6> ctone;

    //8
    uint<1> polarity;
    uint<7> dsc;

    //9
    uint<9> canceller_freq; // h-l
    uint<4> unknown4;
    uint<1> vcs;
    uint<2> canceller;

    //11
    uint<4> name_pad;
    uint<6>[6] name;

    // total: 16bytes

    method get_freq = uint<24>:
    {
	return freq2:::freq1:::freq0;
    }

    method _print_freq = void:
    {
	var freq = get_freq;
	var real_freq = freq;
	if (flags == 0) 
	    real_freq = real_freq * 5000;
	else if (flags == 20)
	    real_freq = real_freq * 6250;
	else if (flags == 40)
	    real_freq = (real_freq * 25000) / 3;
	else if (flags == 60) 
	    real_freq = real_freq * 9000;
	printf "%u10d = %u32d", freq, real_freq;
    }
};


type ICF_channel_flag =
struct
{
    // 0
    uint<1> hide_channel;
    uint<2> skip;
    uint<4> bank;

    // 1
    uint<8> bank_pos;

    // TOTAL: 2B
};


type ICF_scan_edge =
struct
{
    uint<32> start; // l-h
    uint<32> end; // l-h

    //@8
    uint<1> disabled;
    uint<3> mode;
    uint<4> ts;

    //@9
    uint<8> unknown1;
    uint<2> attenuator;
    uint<4> unknown2;

    //@10
    char[6] name;

    // TOTAL: 16B

    method _print_name = void:
    {
	printf "'%s'", catos(name);
    }
};

type ICF_bank_name =
struct
{
    char[5] name;
    byte[2] padding;

    method _print_name = void:
    {
	printf "'%s'", catos(name);
    }
};

type ICF_scan_link_name =
struct
{
    char[5] name;
    byte[2] padding;

    method _print_name = void:
    {
	printf "'%s'", catos(name);
    }
};

type ICF_scan_link =
struct
{
    uint<32> map;
};


type ICF =
struct
{
    ICF_channel[1300] channels; // @ 0 - 0x513F
    
    ICF_channel[200] autowrite_channels @ 0x5140#B;  // - 0x5DBF  = 3200B 

    ICF_scan_edge[25] scan_edges @ 0x5DC0#B;   //  - 0x5F4F = 400B

    // 0x5F50 - 0x5F7F = 58B unknown - FF values
    byte[48] unknown1 @ 0x5F50#B;

    ICF_channel_flag[1300] channels_flag @ 0x5f80#B; // - 0x69A7 = 2600B

    // 0x69A8 - 0x68CF = 552B unknown
    bytes[552] unknown2  @ 0x69A8#B;
    
    // 0x6BD0 - 0x6C0F = 63B
    bytes[63] settings @ 0x6A70#B;

    // 0x6C10 - 0x6CFF = 240B unknown
    bytes[240] unknown3 @ 0x6C10#B;

    char[16] comment @ 0x6D00#B; // - 0x6D0F = 16B

    ICF_bank_name[22] @ 0x6D10#B; // - 0x6DBF = 22B

    ICF_scan_link_name[10] @ 0x6DC0#B; // - 0x6E0F = 10B

    ICF_scan_link[10] @ 0x6C2C#B;  // - 0x6C53 = 40B

    // 0x6C54 - 0x6E4F = 508B unknown
    bytes[508] unknown4 @ 0x6C54#B;

    char[16] footer = "IcomCloneFormat3" @ 0X6E50#B;
};
